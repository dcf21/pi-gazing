#!/usr/bin/python
# The line above helps make syntax highlighting detect that SConscript is python...

import os

srcdir = os.path.join(Dir('.').abspath, 'src')

# Flag telling us whether we're a Raspberry Pi or a desktop PC
I_AM_A_RPI = os.uname()[4].startswith("arm")

# Are we building sources which depend on OpenMAX?
compileLibav = ARGUMENTS.get('libav', 1)

# Build options to pass to gcc
ccFlags = ['-O3', '-Wall', '-g', '-fopenmp', '-D_FILE_OFFSET_BITS=64']
# ccFlags   = ['-O0','-Wall','-g','-D_FILE_OFFSET_BITS=64'] # Use this version for debugging only
linkFlags = ['-fopenmp']
ccDefines = ['DATE=\\"03/05/2019\\"', 'VERSION=\\"0.0.3\\"', 'SRCDIR=\\"%s\\"' % srcdir]

# C source files which are common to all binaries we are going to build
commonFiles = ['argparse/argparse.c', 'backgroundSub.c', 'gnomonic.c', 'imageProcess.c',
               'png/image_in.c', 'png/image_out.c', 'settings.c',
               'utils/asciiDouble.c', 'utils/error.c', 'utils/julianDate.c', 'utils/lensCorrect.c',
               'utils/skyClarity.c', 'vidtools/color.c']

# List of all the binaries we are going to build
# [ Requires OpenMAX , Requires libav , list of source files  , binary name ]
targets = [[0, 0, commonFiles + ['frontends/lensCorrect.c'], 'lensCorrect'],
           [0, 0, commonFiles + ['frontends/multiply.c'], 'multiply'],
           [0, 0, commonFiles + ['frontends/resize.c'], 'resize'],
           [0, 0, commonFiles + ['frontends/skyClarity.c'], 'skyClarity'],
           [0, 0, commonFiles + ['frontends/subtract.c'], 'subtract'],
           [0, 0, commonFiles + ['frontends/converters/rawimg2png.c'], 'rawimg2png'],
           [0, 0, commonFiles + ['frontends/converters/rawimg2png3.c'], 'rawimg2png3'],
           [0, 0, commonFiles + ['frontends/converters/rawvid2frames.c'], 'rawvid2frames'],
           [0, 1, commonFiles + ['frontends/converters/rawvid2mp4_libav.c'], 'rawvid2mp4_libav'],
           ]

subDirs = ['', 'frontends', 'frontends/converters', 'png', 'utils']
includePaths = [os.path.join('src', i) for i in subDirs]
libraries = ['gsl', 'gslcblas', 'png', 'm']
libraryPaths = ['/usr/lib']

includePaths_libav = []
libraryPaths_libav = []
libraries_libav = ['avutil', 'avcodec', 'avformat']

debugOptions = [[0, ''], [1, 'debug']]

envNoDebug = Environment()
for d in subDirs:
    envNoDebug.VariantDir(variant_dir=os.path.join('obj', d), src_dir=os.path.join('src', d), duplicate=0)
envNoDebug.Append(CPPDEFINES=ccDefines + ['DEBUG=0'])

envDebug = Environment()
for d in subDirs:
    envDebug.VariantDir(variant_dir=os.path.join('obj', 'debug', d), src_dir=os.path.join('src', d), duplicate=0)
envDebug.Append(CPPDEFINES=ccDefines + ['DEBUG=1'])

for env in [envDebug, envNoDebug]:
    env.Append(CCFLAGS=ccFlags)
    env.Append(LINKFLAGS=linkFlags)
    env.Append(CPPPATH=includePaths + (includePaths_libav if compileLibav else []))
    env.Append(LIBS=libraries + (libraries_libav if compileLibav else []))
    env.Append(LIBPATH=libraryPaths + (libraryPaths_libav if compileLibav else []))

for debugOption in debugOptions:
    for target in targets:
        needLibav = target[1]
        if needLibav and not compileLibav:
            continue

        outfname = os.path.join('bin', debugOption[1], target[3])
        objPrefix = 'obj/debug' if debugOption[0] else 'obj'
        srcs = [os.path.join(objPrefix, i) for i in target[2]]
        objs = []
        env = (envDebug if debugOption[0] else envNoDebug)
        for s in srcs:
            objs.append(env.Object(s))
        env.Program(outfname, objs)
