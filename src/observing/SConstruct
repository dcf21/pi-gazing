#!/usr/bin/python
# The line above helps make syntax highlighting detect that SConscript is python...

import os,sys

srcdir = os.path.join( Dir('.').abspath , 'src' )

# Flag telling us whether we're a raspberry pi or a desktop PC
I_AM_A_RPI  = os.uname()[4].startswith("arm")

# Are we building sources which depend on OpenMAX?
compileOpenMAX = ARGUMENTS.get('openmax', I_AM_A_RPI)
compileLibav   = ARGUMENTS.get('libav'  , 1)
compileMono    = ARGUMENTS.get('mono'   , 1)

# Build options to pass to gcc
ccFlags   = ['-O3','-Wall','-g','-fopenmp','-D_FILE_OFFSET_BITS=64']
#ccFlags   = ['-O0','-Wall','-g','-D_FILE_OFFSET_BITS=64'] # Use this version for debugging only
linkFlags = ['-fopenmp']
ccDefines = ['DATE=\\"17/02/2016\\"' , 'VERSION=\\"0.0.2\\"' , 'SRCDIR=\\"%s\\"'%srcdir , 'ALLDATAMONO=%s'%compileMono]

# C source files which are common to all binaries we are going to build
commonFiles = ['analyse/observe.c','analyse/trigger.c','jpeg/jpeg_in.c','png/image_in.c','png/image_out.c','utils/julianDate.c','utils/asciiDouble.c','utils/error.c','utils/filledPoly.c','utils/lensCorrect.c','utils/tools.c','vidtools/color.c','vidtools/v4l2uvc.c']

# List of all the binaries we are going to build
# [ Flag: Requires OpenMAX , Requires libav , list of source files  , binary name ]
targets = [ [0, 0, commonFiles + ['frontends/vidRec.c']              , 'vidRec'],
            [0, 0, commonFiles + ['frontends/realtimeObserve.c']     , 'realtimeObserve'],
            [0, 0, commonFiles + ['frontends/realtimeObserve_dslr.c'], 'realtimeObserve_dslr'],
            [0, 1, commonFiles + ['frontends/analyseH264_libav.c']   , 'analyseH264_libav'],
            [1, 0, commonFiles + ['frontends/recordH264.c']          , 'recordH264'],
            [0, 0, commonFiles + ['frontends/skyClarity.c']          , 'skyClarity'],
            [0, 0, commonFiles + ['frontends/snapshot.c']            , 'snapshot'],
            [0, 0, commonFiles + ['frontends/makeMedianMap.c']       , 'makeMedianMap'],
            [0, 0, commonFiles + ['converters/rawimg2png.c']         , 'rawimg2png'],
            [0, 0, commonFiles + ['converters/rawimg2png3.c']        , 'rawimg2png3'],
            [0, 0, commonFiles + ['converters/rawvid2frames.c']      , 'rawvid2frames'],
            [1, 0, commonFiles + ['converters/rawvid2mp4_openmax.c'] , 'rawvid2mp4_openmax'],
            [0, 1, commonFiles + ['converters/rawvid2mp4_libav.c']   , 'rawvid2mp4_libav'],
          ];

subDirs      = ['','analyse','converters','frontends','png','utils','vidtools']
includePaths = [ os.path.join('src',i) for i in subDirs ]
libraries    = ['gsl','gslcblas','v4l2','jpeg','png','m','rt']
libraryPaths = ['/usr/lib']

includePaths_openmax = ['/opt/vc/include','/opt/vc/include/interface/vcos/pthreads','/opt/vc/include/interface/vmcs_host/linux/']
libraryPaths_openmax = ['/opt/vc/lib']
libraries_openmax    = ['openmaxil','vcos','bcm_host','pthread']

includePaths_libav   = []
libraryPaths_libav   = []
libraries_libav      = ['avutil','avcodec','avformat']


debugOptions = [ [0,''] , [1,'debug'] ]

envNoDebug = Environment()
for d in subDirs: envNoDebug.VariantDir(variant_dir = os.path.join('obj',d), src_dir = os.path.join('src',d), duplicate = 0)
envNoDebug.Append(CPPDEFINES = ccDefines+['DEBUG=0'])

envDebug = Environment()
for d in subDirs: envDebug.VariantDir(variant_dir = os.path.join('obj','debug',d), src_dir = os.path.join('src',d), duplicate = 0)
envDebug.Append(CPPDEFINES = ccDefines+['DEBUG=1'])

for env in [envDebug,envNoDebug]:
  env.Append(CCFLAGS   = ccFlags)
  env.Append(LINKFLAGS = linkFlags)
  env.Append(CPPPATH   = includePaths + (includePaths_openmax if compileOpenMAX else []) + (includePaths_libav if compileLibav else []))
  env.Append(LIBS      = libraries    + (libraries_openmax    if compileOpenMAX else []) + (libraries_libav    if compileLibav else []))
  env.Append(LIBPATH   = libraryPaths + (libraryPaths_openmax if compileOpenMAX else []) + (libraryPaths_libav if compileLibav else []))

for debugOption in debugOptions:
  for target in targets:
     needOpenMAX = target[0]
     needLibav   = target[1]
     if (needOpenMAX and not compileOpenMAX): continue
     if (needLibav   and not compileLibav  ): continue
     outfname    = os.path.join('bin' , debugOption[1] , target[3] )
     objPrefix   = 'obj/debug' if debugOption[0] else 'obj';
     srcs        = [ os.path.join(objPrefix,i) for i in target[2] ]
     objs        = []
     env         = (envDebug if debugOption[0] else envNoDebug)
     for s in srcs: objs.append( env.Object(s) )
     env.Program(outfname, objs)
